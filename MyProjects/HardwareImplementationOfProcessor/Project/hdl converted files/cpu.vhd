----------------------------------------------------------------------------------------------
--
-- Generated by X-HDL Verilog Translator - Version 4.2.5 May 28, 2012
-- Thu Mar 3 2016 09:43:13
--
--      Input file      : 
--      Component name  : cpu
--      Author          : 
--      Company         : 
--
--      Description     : 
--
--
----------------------------------------------------------------------------------------------

LIBRARY ieee;
   USE ieee.std_logic_1164.all;

ENTITY cpu IS
   PORT (
      out_xhdl3  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
      address    : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
      pc         : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
      write      : OUT STD_LOGIC;
      istr       : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
      reset      : IN STD_LOGIC;
      clk        : IN STD_LOGIC;
      in_xhdl1   : IN STD_LOGIC_VECTOR(15 DOWNTO 0)
   );
END cpu;

ARCHITECTURE trans OF cpu IS
   COMPONENT and_gate IS
      PORT (
         out_xhdl1  : OUT STD_LOGIC;
         a          : IN STD_LOGIC;
         b          : IN STD_LOGIC
      );
   END COMPONENT;
   
   COMPONENT newalu IS
      PORT (
         out_xhdl2  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
         zr         : OUT STD_LOGIC;
         ng         : OUT STD_LOGIC;
         c          : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
         x          : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
         y          : IN STD_LOGIC_VECTOR(15 DOWNTO 0)
      );
   END COMPONENT;
   
   COMPONENT or_gate IS
      PORT (
         out_xhdl1  : OUT STD_LOGIC;
         a          : IN STD_LOGIC;
         b          : IN STD_LOGIC
      );
   END COMPONENT;
   
   
   SIGNAL w1            : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL w3            : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL w4            : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL w5            : STD_LOGIC;
   SIGNAL w6            : STD_LOGIC;
   SIGNAL w7            : STD_LOGIC;
   SIGNAL w8            : STD_LOGIC;
   SIGNAL w9            : STD_LOGIC;
   SIGNAL w10           : STD_LOGIC;
   SIGNAL w11           : STD_LOGIC;
   SIGNAL w12           : STD_LOGIC;
   SIGNAL w13           : STD_LOGIC;
   SIGNAL w14           : STD_LOGIC;
   SIGNAL w15           : STD_LOGIC;
   SIGNAL w16           : STD_LOGIC;
   SIGNAL w17           : STD_LOGIC;
   SIGNAL w18           : STD_LOGIC;
   
   -- Declare intermediate signals for referenced outputs
   SIGNAL out_xhdl2     : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL address_xhdl0 : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL pc_xhdl4      : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL write_xhdl5   : STD_LOGIC;
BEGIN
   -- Drive referenced outputs
   out_xhdl3 <= out_xhdl2;
   address <= address_xhdl0;
   pc <= pc_xhdl4;
   write <= write_xhdl5;
   
   
   
   p1 : mux16_21
      PORT MAP (
         w1,
         istr(15),
         out_xhdl2,
         istr
      );
   
   
   n1 : NOT_gate
      PORT MAP (
         w15,
         istr(15)
      );
   
   
   o1 : or_gate
      PORT MAP (
         w16,
         istr(5),
         w15
      );
   
   
   p2 : register_16
      PORT MAP (
         address_xhdl0,
         w1,
         w16,
         clk
      );
   
   
   p3 : mux16_21
      PORT MAP (
         w3,
         istr(12),
         address_xhdl0,
         in_xhdl1
      );
   
   
   a1 : and_gate
      PORT MAP (
         w5,
         istr(4),
         istr(15)
      );
   
   
   p4 : register_16
      PORT MAP (
         w4,
         out_xhdl2,
         w5,
         clk
      );
   
   
   p5 : newalu
      PORT MAP (
         out_xhdl2,
         w18,
         w17,
         istr(11 DOWNTO 6),
         w4,
         w3
      );
   
   
   a2 : and_gate
      PORT MAP (
         write_xhdl5,
         istr(15),
         istr(3)
      );
   
   
   o2 : or_gate
      PORT MAP (
         w6,
         w17,
         w18
      );
   
   
   n2 : NOT_gate
      PORT MAP (
         w7,
         w6
      );
   
   
   a3 : and_gate
      PORT MAP (
         w10,
         w7,
         istr(0)
      );
   
   
   a4 : and_gate
      PORT MAP (
         w9,
         w17,
         istr(2)
      );
   
   
   a5 : and_gate
      PORT MAP (
         w8,
         w18,
         istr(1)
      );
   
   
   o3 : or_gate
      PORT MAP (
         w11,
         w9,
         w8
      );
   
   
   o4 : or_gate
      PORT MAP (
         w12,
         w10,
         w11
      );
   
   
   a6 : and_gate
      PORT MAP (
         w13,
         w12,
         istr(15)
      );
   
   
   n3 : NOT_gate
      PORT MAP (
         w14,
         w13
      );
   
   
   p7 : pc
      PORT MAP (
         pc_xhdl4,
         address_xhdl0,
         w14,
         w13,
         reset,
         clk
      );
   
END trans;



